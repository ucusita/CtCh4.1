 @since 2.9.0
 *
 * @return array
 */
function get_plugin_updates() {
	$all_plugins = get_plugins();
	$upgrade_plugins = array();
	$current = get_site_transient( 'update_plugins' );
	foreach ( (array)$all_plugins as $plugin_file => $plugin_data) {
		if ( isset( $current->response[ $plugin_file ] ) ) {
			$upgrade_plugins[ $plugin_file ] = (object) $plugin_data;
			$upgrade_plugins[ $plugin_file ]->update = $current->response[ $plugin_file ];
		}
	}

	return $upgrade_plugins;
}

/**
 * @since 2.9.0
 */
function wp_plugin_update_rows() {
	if ( !current_user_can('update_plugins' ) )
		return;

	$plugins = get_site_transient( 'update_plugins' );
	if ( isset($plugins->response) && is_array($plugins->response) ) {
		$plugins = array_keys( $plugins->response );
		foreach ( $plugins as $plugin_file ) {
			add_action( "after_plugin_row_$plugin_file", 'wp_plugin_update_row', 10, 2 );
		}
	}
}

/**
 *
 * @param string $file
 * @param array  $plugin_data
 * @return false|void
 */
function wp_plugin_update_row( $file, $plugin_data ) {
	$current = get_site_transient( 'update_plugins' );
	if ( !isset( $current->response[ $file ] ) )
		return false;

	$r = $current->response[ $file ];

	$plugins_allowedtags = array('a' => array('href' => array(),'title' => array()),'abbr' => array('title' => array()),'acronym' => array('title' => array()),'code' => array(),'em' => array(),'strong' => array());
	$plugin_name = wp_kses( $plugin_data['Name'], $plugins_allowedtags );

	$details_url = self_admin_url('plugin-install.php?tab=plugin-information&plugin=' . $r->slug . '&section=changelog&TB_iframe=true&width=600&height=800');

	$wp_list_table = _get_list_table('WP_Plugins_List_Table');

	if ( is_network_admin() || !is_multisite() ) {
		if ( is_network_admin() ) {
			$active_class = is_plugin_active_for_network( $file ) ? ' active': '';
		} else {
			$active_class = is_plugin_active( $file ) ? ' active' : '';
		}

		echo '<tr class="plugin-update-tr' . $active_class . '" id="' . esc_attr( $r->slug . '-update' ) . '" data-slug="' . esc_attr( $r->slug ) . '" data-plugin="' . esc_attr( $file ) . '"><td colspan="' . esc_attr( $wp_list_table->get_column_count() ) . '" class="plugin-update colspanchange"><div class="update-message">';

		if ( ! current_user_can( 'update_plugins' ) ) {
			printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s details</a>.'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version );
		} elseif ( empty($r->package) ) {
			printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s details</a>. <em>Automatic update is unavailable for this plugin.</em>'), $plugin_name, esc_url($details_url), esc_attr($plugin_name), $r->new_version );
		} else {
			printf( __( 'There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s details</a> or <a href="%5$s" class="update-link">update now</a>.' ), $plugin_name, esc_url( $details_url ), esc_attr( $plugin_name ), $r->new_version, wp_nonce_url( self_admin_url( 'update.php?action=upgrade-plugin&plugin=' ) . $file, 'upgrade-plugin_' . $file ) );
		}
		/**
		 * Fires at the end of the update message container in each
		 * row of the plugins list table.
		 *
		 * The dynamic portion of the hook name, `$file`, refers to the path
		 * of the plugin's primary file relative to the plugins directory.
		 *
		 * @since 2.8.0
		 *
		 * @param array $plugin_data {
		 *     An array of plugin metadata.
		 *
		 *     @type string $name         The human-readable name of the plugin.
		 *     @type string $plugin_uri   Plugin URI.
		 *     @type string $version      Plugin version.
		 *     @type string $description  Plugin description.
		 *     @type string $author       Plugin author.
		 *     @type string $author_uri   Plugin author URI.
		 *     @type string $text_domain  Plugin text domain.
		 *     @type string $domain_path  Relative path to the plugin's .mo file(s).
		 *     @type bool   $network      Whether the plugin can only be activated network wide.
		 *     @type string $title        The human-readable title of the plugin.
		 *     @type string $author_name  Plugin author's name.
		 *     @type bool   $update       Whether there's an available update. Default null.
	 	 * }
	 	 * @param array $r {
	 	 *     An array of metadata about the available plugin update.
	 	 *
	 	 *     @type int    $id           Plugin ID.
	 	 *     @type string $slug         Plugin slug.
	 	 *     @type string $new_version  New plugin version.
	 	 *     @type string $url          Plugin URL.
	 	 *     @type string $package      Plugin update package URL.
	 	 * }
		 */
		do_action( "in_plugin_update_message-{$file}", $plugin_data, $r );

		echo '</div></td></tr>';
	}
}

/**
 *
 * @return array
 */
function get_theme_updates() {
	$current = get_site_transient('update_themes');

	if ( ! isset( $current->response ) )
		return array();

	$update_themes = array();
	foreach ( $current->response as $stylesheet => $data ) {
		$update_themes[ $stylesheet ] = wp_get_theme( $stylesheet );
		$update_themes[ $stylesheet ]->update = $data;
	}

	return $update_themes;
}

/**
 * @since 3.1.0
 */
function wp_theme_update_rows() {
	if ( !current_user_can('update_themes' ) )
		return;

	$themes = get_site_transient( 'update_themes' );
	if ( isset($themes->response) && is_array($themes->response) ) {
		$themes = array_keys( $themes->response );

		foreach ( $themes as $theme ) {
			add_action( "after_theme_row_$theme", 'wp_theme_update_row', 10, 2 );
		}
	}
}

/**
 *
 * @param string   $theme_key
 * @param WP_Theme $theme
 * @return false|void
 */
function wp_theme_update_row( $theme_key, $theme ) {
	$current = get_site_transient( 'update_themes' );
	if ( !isset( $current->response[ $theme_key ] ) )
		return false;
	$r = $current->response[ $theme_key ];

	$details_url = add_query_arg( array( 'TB_iframe' => 'true', 'width' => 1024, 'height' => 800 ), $current->response[ $theme_key ]['url'] );

	$wp_list_table = _get_list_table('WP_MS_Themes_List_Table');

	echo '<tr class="plugin-update-tr"><td colspan="' . $wp_list_table->get_column_count() . '" class="plugin-update colspanchange"><div class="update-message">';
	if ( ! current_user_can('update_themes') ) {
		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s details</a>.'), $theme['Name'], esc_url($details_url), esc_attr($theme['Name']), $r->new_version );
	} elseif ( empty( $r['package'] ) ) {
		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s details</a>. <em>Automatic update is unavailable for this theme.</em>'), $theme['Name'], esc_url($details_url), esc_attr($theme['Name']), $r['new_version'] );
	} else {
		printf( __('There is a new version of %1$s available. <a href="%2$s" class="thickbox" title="%3$s">View version %4$s details</a> or <a href="%5$s">update now</a>.'), $theme['Name'], esc_url($details_url), esc_attr($theme['Name']), $r['new_version'], wp_nonce_url( self_admin_url('update.php?action=upgrade-theme&theme=') . $theme_key, 'upgrade-theme_' . $theme_key) );
	}
	/**
	 * Fires at the end of the update message container in each
	 * row of the themes list table.
	 *
	 * The dynamic portion of the hook name, `$theme_key`, refers to
	 * the theme slug as found in the WordPress.org themes repository.
	 *
	 * @since 3.1.0
	 *
	 * @param WP_Theme $theme The WP_Theme object.
	 * @param array    $r {
	 *     An array of metadata about the available theme update.
	 *
	 *     @type string $new_version New theme version.
	 *     @type string $url         Theme URL.
	 *     @type string $package     Theme update package URL.
	 * }
	 */
	do_action( "in_theme_update_message-{$theme_key}", $theme, $r );

	echo '</div></td></tr>';
}

/**
 *
 * @global int $upgrading
 * @return false|void
 */
function maintenance_nag() {
	include( ABSPATH . WPINC . '/version.php' ); // include an unmodified $wp_version
	global $upgrading;
	$nag = isset( $upgrading );
	if ( ! $nag ) {
		$failed = get_site_option( 'auto_core_update_failed' );
		/*
		 * If an update failed critically, we may have copied over version.php but not other files.
		 * In that case, if the install claims we're running the version we attempted, nag.
		 * This is serious enough to err on the side of nagging.
		 *
		 * If we simply failed to update before we tried to copy any files, then assume things are
		 * OK if they are now running the latest.
		 *
		 * This flag is cleared whenever a successful update occurs using Core_Upgrader.
		 */
		$comparison = ! empty( $failed['critical'] ) ? '>=' : '>';
		if ( version_compare( $failed['attempted'], $wp_version, $comparison ) )
			$nag = true;
	}

	if ( ! $nag )
		return false;

	if ( current_user_can('update_core') )
		$msg = sprintf( __('An automated WordPress update has failed to complete - <a href="%s">please attempt the update again now</a>.'), 'update-core.php' );
	else
		$msg = __('An automated WordPress update has failed to complete! Please notify the site administrator.');

	echo "<div class='update-nag'>$msg</div>";
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            xÊ˘ë<Øá∂K⁄}N˛l¯SÔU÷uã}Í–è“6”WÀısRÉ–†Ÿ∆p]™;˝#pÃb “«π˝ÇT|®7I?π˚¢◊*Xªcbé/<ıÍi4“€& +≤Q∑[J˜r∞„™%÷◊Œ¥Ê R¿ùΩ’1–Æüÿiˆ48‘± `(‰r7$íJÒ3“Ø∆ÑºWÁÑÚá5˙z:˜„°Ì¯kCU`°â‚Îo ãíÇH(zPÇRV3µóÆú‘äV¶ı#$S ")µa_>ÒÃ√ê%Ña
Q⁄T0$£<π˙∆ƒÆ‹{6ŒÌÙV|∆‹wÓl§≈Ñnh9¿ˇS◊IÁ&8◊y	ïù;uF∏ÿ∑ñ ⁄≈}ZaÌkä≈µØOı.–πT0
º≠sç˚Î¨éF‰qª“ ªOåÚñ;ãa¢n·–‚ÅÊ÷=‚ê§û¶âsC!(ád””_+ è8˘°√ÊkIÓû5ƒ…‹°àí‹+ó.Âë√µ-5{y,◊ço?5ï äå"ﬂ1ÏR\Ué§;Ú»Uc!9í9dr[jò íq´ÈUH‘˚S~ß·∞*yüˇ˚¥`ñÄKMUÎ{jgF⁄Õ=&[YW¨=Ì©†+•Ü%vVrpß5l™˘‘%±úÁ?Ïöf/ò∫°8rÜÉBg4PÇ9Bßh<`ÍEApCê‰ÎƒR·J|/ÿM≈µ4ÈJ†/Â≈Z⁄ÊßRπB
Áñqç>£IΩ√aåÊ«vYÿa7æÍˆ	Ì#îÛ8±§ΩVΩÁ÷#|“µÑÛ¬D”rÑ†ÆfcÛ˛W◊Õ(º0å†&)˙~F©_Áíáhî¢Ø^‚”“"T√¡ûX4xÃ¡k¨’s¥üö|H±âRU¥¬Ê—¶iªînÕ]
®‰øøê˘ª±€≠ﬂyø˝ˇ<}yÊEPÄ©[ÿÁ<ÛCGÙˇ≠=Ω H8ÏñI-≤›,`@	pŒv<´%}ûø^jè£l7PßÀ±∫Êg©¨ºùp8÷’®«m#˘&®jR≤<Wô»cÇlìœHπN]`f~⁄Ãu"œ“®ËÜøvπJ∏#	$j√tfñ%k«5∑ŸÃfW%F∂>áÈê£iu-0À&[£*´3§e{ç€2_˚Nìu¨<gÓmyJÌ∆WÌ[Âu∫UU*™¶î]˛f¨Êtœ‰µ⁄ø;r‰&'6’A˜OZ2(AIòÇÂ[:ƒgôízL GzB¡ﬁ™È&ëÃÒ{ﬁyWπZ÷mπ<âY¡⁄;kJ’LL7ˆ≈ƒ:˛:ÆôFÁ≈Ã©¥ Y·zÕ «3çÙùµB#(ˇÌ∏‹nY∂fkƒ∑ŸchÓ∆¶_ùNÀcî”Ÿˇ˚¥`ñÄK÷k{joáÍŸa+]í˝%ULΩÌ°õkeÑ°nR®∫£
8s%Sçç“•Tjµl ≥˝π‘CU)Åtß1∫\C9 õ?‹g‘xœ"*•wwèc`‚éˇµ¡\ÈL¶;‘d Ó……Zç´¶'vŸõgCﬂ" ∆‘_Ω‚M≤¿›¿ÆsJÀV˘–à≥ﬁ◊≠~ı¨÷ê.8<à`i÷≠.ﬂ"≠ıT≤Ö ◊UÃÌÁ'(M™Zj:à‰Ãx¿ ∫ÅTÿC«4ª©.$N2ÓñËËbÉıqq‚Éeä+I√U’Vö…ëb«©B7jµıÀs7å°ƒ(¬ŸÎ‘°âSêT˚⁄ñHç@Lπmí›lñﬂiTM
ä8e]á4·KÁß≠”CqI|zw·ŸöL€+◊+qïVaüZ´nFÏ¿í…6lÜ≥¿Õÿ`JP ›Vs2Dö·*†;VﬁV\Ÿc™`BzﬁOÖyŒÏ$ôL∏çw™ﬁ¢CºX´Ö A^©wFŒÈÔö3€F¨]ÕfÍCÜƒ∆∆‚Ö∂ÎTÖ>$◊ﬁ∑Ìò8~!6ºVU.KInY%ñV€æ! Ù°-Ê©Ÿ¶V÷
D3P†®©Ä@LŒ–ä6lËúv|ÿ©jµGÀôHà®\‚’”CSî*U^≈w!µß2<œ≈M”Yûè31˚Ù˜C#∏("tMã9iæl4,”ñ’ıÔ(ìfItñ€e∂Áa)™N¡◊§ΩüÀ∆ßO"£ä “96y¬fBœÿŸˇ˚¥`õÄ˜I÷k8{hr∆JΩ=,[5W¨ΩÎ©‹™5Ü%u^VèI¡ó'PÑyÓ´<Ã=E—9?RI2Êj≈Ωé€˜;CmnVUZ€Iî*I˙U]Xå∫ATJN°5ùX≠V∑DQSVb”ık+«kµ~¸U∫≤µE•b¯Ò/,‘ÑŸ…∂,Á/X‚4ıú∑—ô‡ü•l{:è˛˝~àπi∂írﬂ ∆XÀ’!^p”ui%B√ED®◊¸ Œ6àBPÚN9;yïˇáŒ±uP™ í 82#¨≈ˆ¢§‰W$E¶dÚgÏóƒKÀ∏«◊´˜ˆ∫ê˛5Y∑{˜-ˇ#Lä|*zæÕÕ‡oﬁ˛Ô˙ÌˇÎ¨¿ ”â§€mπié-E&ı¡È;ÛZ6˝º¯gCïJ$y&Bîí.Œµ≤n>±VSÙà†VΩÄì˘ÁGÄ Ë"J5åN—*isL≤~dx-Vbx≤˘!:UÊ¬ †~JÿBÎâÿ˚7Ù¥¨FïE”mY⁄Gn¨n1ı‰»\È√
ù¨ﬂZµ‰8\üﬂN∫(ùÂ≥9Z€€ªhcë∂‹mπöàKd!:Ñ$wñµÉ∑Õ>Òåô±§ÜóI‚3ÿÎÂïéí€j5Ûò,ÉáN äΩ[Ç”π#w8O52-mØóÌÚ˝3kæ∆?w(πÓ∆ (6'3+Úè˝Ô_ˇ˝˝ñÍ‘Ω˙È%πq…$íkÇÑ »§°fB§zÌ“®ÈhIVZ]ˇ˚¥`î ´D”ÎbÍrG
ù=Ü[R—'UßΩÌ©÷jÙ˜±l913¢ŒÑ5[¢+KÁ‹8[Ü¢X|πrG±1"XíOß±H£U»´j´∫ªsfpÜá™è÷¶∂(TÃ7'Í∏4ñÏS¿§ëµ≠E{¥65[qUéÁõÍÙã≠2≈£…>m‚⁄çQoÌΩ¸}x~?NªÈ€≠KÃ}˝"ú±…±…/m!§ñî÷BûñÂ±·Gœ3:πû
U°å¢é°?ïŒ¢˚—tˆz’˘ÅNG√ ©±YM0Ò{«wØ.køO≠Çb ›ó“>⁄l¶ﬁ—€?ß˙◊á·]Zn~Îè8‡åD”®r–+Ø!+r6)k÷À[H	…e∂€m∂ÔH hâLê√}\¨d‘‘êÀ@˘ ‡à†N<é5Üúâ•‚©149E%·È¢≤√E«≈vVãÅB}&∏éûh A¢và¿U±°(2x!v$g(√'¶≤nÚ…ÆÎ#2}S„ÆLôõZ≤/íX}Òü˚y6ŸÜ√ò»¸NS7ñ[^ˆ<"+p€ËG$éG$í^ô `>ù+»)£2q^∆ﬁ‘£r,,êô÷öàt'ÍÊWPŸ,0⁄≥¶Õq´±‡PlL¥ªQôØÂVÜóY¿~"I…§SBùx…•Èô¡X%»µ»<Îdú2Á(RPjèçMmÎÕc2†õı*˜{?K¸É•“Çﬂ€n8‹ßq6¿À©gGÍVÑœñ◊+Ê{SSZrU6PfÍùˇ˚¥`ò XHViÏKhÄÁz≠=È]QÒQGΩç©ËÍuî•mΩÚ9jéi<…•<í%ˆXõ¢∞jPÑ-î¬Róè∆feøVzL$0ÒÕòT`CYz!i};íà÷¶?≠&7ÂJT¸˘˘ñ›Ösˆ´X˜lÕ˘ªÀerˇñÊ!æÀªîÃê©∆^˚∂¨Ô˚[óóÑÇ‹m∏‰qπ°ÙQ¶÷ó“ÎzöÇÄ„cËû2»Ä0$*Tù=hF.ùLûG$–Ù‹∏¿TP!Tâ£»\TÑYyõäò¨F($¥5¶ËñjˆßX¨’∂ﬁ≠§ò¿ça∫∫mﬁÍü˝˙Á√›÷&±˚≥Q±” VØ˝∂”M€ƒ†wóQ∫Æ∑÷¢pI!ÃO…¡'”l4á·hÓëÿ’M…BùeiÎÃ∞·®:°q¯¥–¿≥Ñ¢ahºÙó«{ÎvøFwX_Ωêæ3õ'TWÖ#á–Ô÷ÃıUﬂ◊]¶˚‚Ø}µÂöU¶©ü∂r;R\®<ë´^ãr©‚P"› =hñ¢q∂€qπö± G +ûQ∏¯ﬂ„BõIÜÄTC∞lK†Ò‡4(4D∫§DbµVìmc™ä]l~ÜÁº«≈)WY§ßï•£õû©\<∑Z∏”wPrR˚l—ªSÆ‰£.æéU›ùÖE˜L~r"Œ Ç„ÇH¿-.∆KÜ[;îË,⁄˜%ˇ∂‹mπûÖ$Ft«k*õë®>1ÑÛ©èæ"/9H0y1’êGÂp´ñˇ˚¥`õ CBS”,bËÑg™çe,]‹˘SL1ã©¿+dÙ≠vV°|N·Y)ÖË∏Ì—˙$à«5≈î±j≈∆w?ìaeØS uÛYmÁW‚»£îçƒã•ﬁvàgﬁµ¯õäîÕçÍﬁ∑ÏÊ3lˇ(&¨R≈‚ÂG≥U'[ÌõÙ©ˇÇΩuULØHÖ∏Ósånù™%\'ÇÄ¿∆ñm9aƒol16U“<?dÍ¡ÖƒûgP>;
à$íIÆÅ÷®lvö«1˝‰Ö”&¶ΩRâ”ãèö,´
–.X˛∫êd⁄%π8€ÓR#Ü˝"ÌI(†yê˚“yçŸ_∆Tœ@7#rIl≤\ƒ2¿Ñ‡K†&—WUBf±pÊÈ«Póéƒ tp4\©Ü›i¥«ä#€/#∂ﬂπ^Æl#ét-ÎSsíùçE˚qÜy¢@ƒãª'5r•ùØÕõf¶ß¶‹b⁄œG”û!œãc°@‹µÆÒl÷êsOúxßÍ‘Øf¢Ö;)ñﬂ—Ø˛8sü¶øˇ€m$î’±i%Õ˜Y•I[Ÿ|Ç>_©(¶dLbÖåú> èÒ?å'.Æ„˛ø/ÿ‹IlïcÙ6~_<51[k8 ‘¶°ÕPÛñ˛Â⁄}èõ[ÌΩy√•ç2ÍMçéö∑F¢]Z[°é-ñ◊¢Ò‚0áFÅÆ0~˝C@LÜ®Cjÿ‰∫À-Œ Ã`C |Ò{ßô4ˇÚH˚=«JâGJ'dV™„*NÅjâ©Ô[àN†æS©ñ
∞Úgê§2î”âJ#%B(`9¨ˇ˚¥`´ \BUiÏzÍÄ
˙aå]íï+S¨Ω-¢*#©ıÜ1¥ MR√+ PÏH#ƒ-åña >;a‚'HÑ@añä*ë⁄úä%Ó∑_VQA¯™÷±&·∏úöNæ†∆Ù‡5Åí`SãT¶úVÙ0	Mƒ§í7&j¡_†%@'ñÌ[?&øï5ˆÆvπ`(ñáÙ^@9´K!û1'VÉQ egï¬¢(ƒÿ›∑U	Úı‘≠Œå’∆DC€vZQ€ïÖ,VË&°~π⁄b“'≥V}›∆≥v~Pﬂìª<“«Z}˚4Ì≥uòÌl˛dìU(XïÙõj!®Ñ¶⁄m∑$éL∫â&Ç`∏Õ7±◊2~‘Ûàê~Ú#bÂÕ¥Ò9)…öíˆeé‹$F”ç,!≤†"^iÁçD˝U6¬fÆdû†∏¥ÎIÙ©√exóÆM]ªŒdvìø[ç®óz.∑œS"°ƒ˜µçGUˆßŒÎ¿Ê÷ﬁ	™∫æ˝Íüø˘Êw˛ı™™™UtR*+u_ë∏’<OòRR¢≥¢S¶«1B‰—˝Î3X{3B›^jˇ†¶º5{í-¿KmYÌ‰Æqbﬁñè∏0$U’∫˚cÉçZ–{÷ÿµ7à%∂_≈Ñ‹ŸâhÊ˜[ö–)®Ø°¬ƒøΩæ+õb0 "RÇÓÂX,√;dME‹Í!´ªM∂€yÑB@˙;á~éƒg©VÎ+zÖW ÇzKá“( √¡ö*¨ü≠ãaQµ¯È„Â¶#s¨!¿ÒXˇ˚¥`£Ä"CTk	bÍÜ©eè]êaMG±-¢†)ıÜ1t≥R@a»±H9≤»“¿i{ëÉÓ4ªo190É++™ éù≈¥D≠d1á4µ˘k¶í9i‘1by∑∞Æîã"£◊<:†U¨T‚!-7#nF€ì2ê4-yh⁄L∂’Ÿn)>1(	ÖUÍ®‰dàåpë¬⁄Ë=§¶öÂèâ√É«dƒé°í¬¢ÈÊ[ÿÏ˛°Ï˝ıqÂ\ZÑVu2wnüæ]1„ÜËﬂoVïJ≥„XtﬂÀyjπxÚˆi›≠ı1¸QFÌÃäÇÍI5ÓôlÒΩ…BâÀÄW~≠)MÂXﬁ†cúDô8´AÀ]ä_Jµ[.ò2¥ænIBñQ÷åÍh{Z:…˛óoQ«9Öîq4øesRÃ◊ÛÑF∂Ëuxø¶à±Î«g”ıÃI[`A™Ó=¡ÃxÚS·gΩâàöÆ5\v⁄]˝-˝‰º‚m<à–É∂!âkÏ^DP]QE∆€m…$r}0ÄW|	Y˘é∆)±ã#Åq€ƒRU(Y±	(uF–°Ø@®’Ù±¥qAR+◊Åv_>Br´,Õãa„Ë2 ˚–P’;aı1íO”◊mwóiÌOóoEºÃW˜ß≠—e´ø≠?.∑◊«r’é.>Éíh[ïSî'äçvÑcvYíÀ$∆ÈË_ExÕ4SÏfÂârÅ
%BTv|Ÿ(9et√õÓ@¬Û!)ldfó§|Â^(#∞Q@ë=z	:^Ê&ïö§=*Fˇ˚¥`©Ä5A”QÏzËË*çaå]ÈOß±ã¢"¢)ıÜ1t§}˚û⁄/B*6bµJÇwÆ◊V@ﬂ+«‡}à—#gW Jæ¸ªJÌj”Ëi.Â5 {©	¿DNã{ë–ﬁ·W(î›í7$≤I<Ç8 ôıÆÔL∆iËJòﬁ>R'Lka¯Ì⁄+ìÚ∂e[j_0k¨|È—…lír‡dP!ï˘ò‹ZÚôÜ&√≥THi»∂ü*±SÛÊV‰l5Ω+”^Sfb;§ÌlÎR}ııîb∑øøHiﬁ€LÔJ: ÉhIŸ≤ÀŸ^qz≠ %ß$éIléOµÄay…NwÏJyÑÖÈRIkT‡0,~§¯â)S-≤≥≈lÃÁrôﬂ≈ÇıµÛu&ÕiãªàÚ+:CNOcø¥è‰•ÿØ&·Y ˇœ6aˇiıZœÛlﬂ>˛æ`„ZØâxñãòﬁñ	ΩÁõÖ>⁄ø˝TÁTc≠§Ujïîª∏ &,
“∏˜V2OΩ√FŒcâTN∆!) ˝r,MIﬂ1◊_âkÆ}>W›z‚πP§†q++?ÌˇZÉJ∂Ça Ùµáîò	™<ŸÈ∆ﬁºˇ8‹<ÑsÊ=„ŒÊV+ehﬂgÊWi”œ≥´¬lnΩÔ“D"*i¶[ø˛æôﬁ¿ßÇ∞líÛI+‡%#∆_GóS¯®≈UjÛ‡”N'ŸÁóM’G9J¢eä⁄ﬁÜÃja2∆§#†˝J±≤£PÁÈÜJ¨Âuˇ˚¥`¨ 4B”ÎzÍÉàJi=å]íS'ΩÎ±ˇ°ÈıÑ•tVFwÃJÍAÃ:6L‰ ¨y—˜Ë¡∫€ÓYUï”◊≠t˙ÃM√ˆ≈"œXéQÿbF√~ù2ZÜ„V”=]åwÔ†YÃÍe…$≤…m≤ﬂ∞Ú
§ãÆÕ`ßŸ·≥;·‰⁄FtÂ`ËÖ§`X®S6yíÏ
∏ú`îª◊*dAw8©b≠Õëû™≠ë#VTPJ⁄(+Ñb&•2M5µu'	€†ä»óG/˛›Ì)K¡ZŸbíÑ#E=÷ıF"Ã¨DÇß#ØﬁíÊçT%&‹çπ#íM@¡π—]≥¥'ÌıâZÑE3™Ò.ÂËí‚àYJ4òÌ¨l¨X¥
7f ¸´bÅ≠˙¿ƒàeB€ãy b2D∏ FÅìÅŸMÔ]RI¥<Ñæ6ÿˇÿ j(óÎ¬hà‡Œ.qBcgÉπÃ“Ã OFÃTd¸÷üY†±ká÷6?rΩ’ÿYµ1Ôcª˛ΩÀAMsˇ¯KRId≤€müŸËiÙÁ:sUcpX	"´b
IbÒ2Q©`ûoÁÒC…)ù˚óX,5e&^∆.—≈=t©PÿÓ`qRº‹Âùé≤(œ•-J∏Ç§I¡z‘¢bé˘â≤#‹j#éÒà6SΩå„‚µÏÒ¨’H∏}<{Dµ∑˛Ø4⁄›˛]‹ ig#.åZªPY§ı2cm¶”m∂ﬁ¿π2GS1¨n8:ÑLv=‹lî˝#±0ë«q°Êè–"vÁ(∂™7GÎ&y*f°ˇ˚¥`≠ áE“k/KjèHämaè],˘Gß±+™(ÈÜ1u4ëI‹Å∏´´kôíÑÅ`Uò†$TÚÿ:4°=íÃÏSN°è§ec„#“Û∑'m…ΩK6l≠¸oCÓQ7 ≈Ÿ˝nØ◊À⁄O*úk˚”q∂ﬁhÉ#‘ÂP2¶Î2˝RƒÁ Àg”∏Œ¿·Ωñ.[≈`˛ ¥…kÃ1æeNyß•¬PpH:)∂≠9Úºç¬√n/iuùKnußÃ^-Yd-âÈq¶={Eﬁõ„Î^€Uv5vÖ´!8#,BºAΩ∞\Ô˜và^ˇ˜üuúèÁÙH§„iß#qºËÇ0â8Bñ≤Áˆ
eÚgÚ4úy8∏ˆx':Ÿ£#êTDuë*”“Ua3È¨⁄t‘}¨zCë[£öEÉØúEÁÆR∆4@éÃ¥¨È∏,ÛM∏ÏΩöA∂g"gW#Zùv'b;∂Ñ˝wŸ› Q¨
ü"h‡PÂÜy◊7ö- ¶&$§„Mß#é<⁄π\≥î‰]©ﬂ3Gzt´©"œº»4ŒG…ƒÜ„V^˚7˜[Dd®æ‚±§Eàc™¡Dƒ°≥#⁄AÒ6ª(	Üçjƒ!∞‡êµ¥éL7ne_inner_html, $class );

			$all_args['all_posts'] = 1;
			$class = '';
		}

		if ( empty( $class ) && ( $this->is_base_request() || isset( $_REQUEST['all_posts'] ) ) ) {
			$class = 'current';
		}

		$all_inner_html = sprintf(
			_nx(
				'All <span class="count">(%s)</span>',
				'All <span class="count">(%s)</span>',
				$total_posts,
				'posts'
			),
			number_format_i18n( $total_posts )
		);

		$status_links['all'] = $this->get_edit_link( $all_args, $all_inner_html, $class );
		if ( $mine ) {
			$status_links['mine'] = $mine;
		}

		foreach ( get_post_stati(array('show_in_admin_status_list' => true), 'objects') as $status ) {
			$class = '';

			$status_name = $status->name;

			if ( ! in_array( $status_name, $avail_post_stati ) || empty( $num_posts->$status_name ) ) {
				continue;
			}

			if ( isset($_REQUEST['post_status']) && $status_name === $_REQUEST['post_status'] ) {
				$class = 'current';
			}

			$status_args = array(
				'post_status' => $status_name,
				'post_type' => $post_type,
			);

			$status_label = sprintf(
				translate_nooped_plural( $status->label_count, $num_posts->$status_name ),
				number_format_i18n( $num_posts->$status_name )
			);

			$status_links[ $status_name ] = $this->get_edit_link( $status_args, $status_label, $class );
		}

		if ( ! empty( $this->sticky_posts_count ) ) {
			$class = ! empty( $_REQUEST['show_sticky'] ) ? 'current' : '';

			$sticky_args = array(
				'post_type'	=> $post_type,
				'show_sticky' => 1
			);

			$sticky_inner_html = sprintf(
				_nx(
					'Sticky <span class="count">(%s)</span>',
					'Sticky <span class="count">(%s)</span>',
					$this->sticky_posts_count,
					'posts'
				),
				number_format_i18n( $this->sticky_posts_count )
			);

			$sticky_link = array(
				'sticky' => $this->get_edit_link( $sticky_args, $sticky_inner_html, $class )
			);

			// Sticky comes after Publish, or if not listed, after All.
			$split = 1 + array_search( ( isset( $status_links['publish'] ) ? 'publish' : 'all' ), array_keys( $status_links ) );
			$status_links = array_merge( array_slice( $status_links, 0, $split ), $sticky_link, array_slice( $status_links, $split ) );
		}

		return $status_links;
	}

	/**
	 *
	 * @return array
	 */
	protected function get_bulk_actions() {
		$actions = array();
		$post_type_obj = get_post_type_object( $this->screen->post_type );

		if ( current_user_can( $post_type_obj->cap->edit_posts ) ) {
			if ( $this->is_trash ) {
				$actions['untrash'] = __( 'Restore' );
			} else {
				$actions['edit'] = __( 'Edit' );
			}
		}

		if ( current_user_can( $post_type_obj->cap->delete_posts ) ) {
			if ( $this->is_trash || ! EMPTY_TRASH_DAYS ) {
				$actions['delete'] = __( 'Delete Permanently' );
			} else {
				$actions['trash'] = __( 'Move to Trash' );
			}
		}

		return $actions;
	}

	/**
	 * @global int $cat
	 * @param string $which
	 */
	protected function extra_tablenav( $which ) {
		global $cat;
?>
		<div class="alignleft actions">
<?php
		if ( 'top' === $which && !is_singular() ) {

			$this->months_dropdown( $this->screen->post_type );

			if ( is_object_in_taxonomy( $this->screen->post_type, 'category' ) ) {
				$dropdown_options = array(
					'show_option_all' => __( 'All categories' ),
					'hide_empty' => 0,
					'hierarchical' => 1,
					'show_count' => 0,
					'orderby' => 'name',
					'selected' => $cat
				);

				echo '<label class="screen-reader-text" for="cat">' . __( 'Filter by category' ) . '</label>';
				wp_dropdown_categories( $dropdown_options );
			}

			/**
			 * Fires before the Filter button on the Posts and Pages list tables.
			 *
			 * The Filter button allows sorting by date and/or category on the
			 * Posts list table, and sorting by date on the Pages list table.
			 *
			 * @since 2.1.0
			 * @since 4.4.0 The `$post_type` parameter was added.
			 *
			 * @param string $post_type The post type slug.
			 */
			do_action( 'restrict_manage_posts', $this->screen->post_type );

			submit_button( __( 'Filter' ), 'button', 'filter_action', false, array( 'id' => 'post-query-submit' ) );
		}

		if ( $this->is_trash && current_user_can( get_post_type_object( $this->screen->post_type )->cap->edit_others_posts ) ) {
			submit_button( __( 'Empty Trash' ), 'apply', 'delete_all', false );
		}
?>
		</div>
<?php
		/**
		 * Fires immediately following the closing "actions" div in the tablenav for the posts
		 * list table.
		 *
		 * @since 4.4.0
		 *
		 * @param string $which The location of the extra table nav markup: 'top' or 'bottom'.
		 */
		do_action( 'manage_posts_extra_tablenav', $which );
	}

	/**
	 *
	 * @return string
	 */
	public function current_action() {
		if ( isset( $_REQUEST['delete_all'] ) || isset( $_REQUEST['delete_all2'] ) )
			return 'delete_all';

		return parent::current_action();
	}

	/**
	 *
	 * @return array
	 */
	protected function get_table_classes() {
		return array( 'widefat', 'fixed', 'striped', is_post_type_hierarchical( $this->screen->post_type ) ? 'pages' : 'posts' );
	}

	/**
	 *
	 * @return array
	 */
	public function get_columns() {
		$post_type = $this->screen->post_type;

		$posts_columns = array();

		$posts_columns['cb'] = '<input type="checkbox" />';

		/* translators: manage posts column name */
		$posts_columns['title'] = _x( 'Title', 'column name' );

		if ( post_type_supports( $post_type, 'author' ) ) {
			$posts_columns['author'] = __( 'Author' );
		}

		$taxonomies = get_object_taxonomies( $post_type, 'objects' );
		$taxonomies = wp_filter_object_list( $taxonomies, array( 'show_admin_column' => true ), 'and', 'name' );

		/**
		 * Filter the taxonomy columns in the Posts list table.
		 *
		 * The dynamic portion of the hook name, `$post_type`, refers to the post
		 * type slug.
		 *
		 * @since 3.5.0
		 *
		 * @param array  $taxonomies Array of taxonomies to show columns for.
		 * @param string $post_type  The post type.
		 */
		$taxonomies = apply_filters( "manage_taxonomies_for_{$post_type}_columns", $taxonomies, $post_type );
		$taxonomies = array_filter( $taxonomies, 'taxonomy_exists' );

		foreach ( $taxonomies as $taxonomy ) {
			if ( 'category' === $taxonomy )
				$column_key = 'categories';
			elseif ( 'post_tag' === $taxonomy )
				$column_key = 'tags';
			else
				$column_key = 'taxonomy-' . $taxonomy;

			$posts_columns[ $column_key ] = get_taxonomy( $taxonomy )->labels->name;
		}

		$post_status = !empty( $_REQUEST['post_status'] ) ? $_REQUEST['post_status'] : 'all';
		if ( post_type_supports( $post_type, 'comments' ) && !in_array( $post_status, array( 'pending', 'draft', 'future' ) ) )
			$posts_columns['comments'] = '<span class="vers comment-grey-bubble" title="' . esc_attr__( 'Comments' ) . '"><span class="screen-reader-text">' . __( 'Comments' ) . '</span></span>';

		$posts_columns['date'] = __( 'Date' );

		if ( 'page' === $post_type ) {

			/**
			 * Filter the columns displayed in the Pages list table.
			 *
			 * @since 2.5.0
			 *
			 * @param array $post_columns An array of column names.
			 */
			$posts_columns = apply_filters( 'manage_pages_columns', $posts_columns );
		} else {

			/**
			 * Filter the columns displayed in the Posts list table.
			 *
			 * @since 1.5.0
			 *
			 * @param array  $posts_columns An array of column names.
			 * @param string $post_type     The post type slug.
			 */
			$posts_columns = apply_filters( 'manage_posts_columns', $posts_columns, $post_type );
		}

		/**
		 * Filter the columns displayed in the Posts list table for a specific post type.
		 *
		 * The dynamic portion of the hook name, `$post_type`, refers to the post type slug.
		 *
		 * @since 3.0.0
		 *
		 * @param array $post_columns An array of column names.
		 */
		return apply_filters( "manage_{$post_type}_posts_columns", $posts_columns );
	}

	/**
	 *
	 * @return array
	 */
	protected function get_sortable_columns() {
		return array(
			'title'    => 'title',
			'parent'   => 'parent',
			'comments' => 'comment_count',
			'date'     => array( 'date', true )
		);
	}

	/**
	 * @global WP_Query $wp_query
	 * @global int $per_page
	 * @param array $posts
	 * @param int $level
	 */
	public function display_rows( $posts = array(), $level = 0 ) {
		global $wp_query, $per_page;

		if ( empty( $posts ) )
			$posts = $wp_query->posts;

		add_filter( 'the_title', 'esc_html' );

		if ( $this->hierarchical_display ) {
			$this->_display_rows_hierarchical( $posts, $this->get_pagenum(), $per_page );
		} else {
			$this->_display_rows( $posts, $level );
		}
	}

	/**
	 * @param array $posts
	 * @param int $level
	 */
	private function _display_rows( $posts, $level = 0 ) {
		// Create array of post IDs.
		$post_ids = array();

		foreach ( $posts as $a_post )
			$post_ids[] = $a_post->ID;

		$this->comment_pending_count = get_pending_comments_num( $post_ids );

		foreach ( $posts as $post )
			$this->single_row( $post, $level );
	}

	/**
	 * @global wpdb    $wpdb
	 * @global WP_Post $post
	 * @param array $pages
	 * @param int $pagenum
	 * @param int $per_page
	 */
	private function _display_rows_hierarchical( $pages, $pagenum = 1, $per_page = 20 ) {
		global $wpdb;

		$level = 0;

		if ( ! $pages ) {
			$pages = get_pages( array( 'sort_column' => 'menu_order' ) );

			if ( ! $pages )
				return;
		}

		/*
		 * Arrange pages into two parts: top level pages and children_pages
		 * children_pages is two dimensional array, eg.
		 * children_pages[10][] contains all sub-pages whose parent is 10.
		 * It only takes O( N ) to arrange this and it takes O( 1 ) for subsequent lookup operations
		 * If searching, ignore hierarchy and treat everything as top level
		 */
		if ( empty( $_REQUEST['s'] ) ) {

			$top_level_pages = array();
			$children_pages = array();

			foreach ( $pages as $page ) {

				// Catch and repair bad pages.
				if ( $page->post_parent == $page->ID ) {
					$page->post_parent = 0;
					$wpdb->update( $wpdb->posts, array( 'post_parent' => 0 ), array( 'ID' => $page->ID ) );
					clean_post_cache( $page );
				}

				if ( 0 == $page->post_parent )
					$top_level_pages[] = $page;
				else
					$children_pages[ $page->post_parent ][] = $page;
			}

			$pages = &$top_level_pages;
		}

		$count = 0;
		$start = ( $pagenum - 1 ) * $per_page;
		$end = $start + $per_page;
		$to_display = array();

		foreach ( $pages as $page ) {
			if ( $count >= $end )
				break;

			if ( $count >= $start ) {
				$to_display[$page->ID] = $level;
			}

			$count++;

			if ( isset( $children_pages ) )
				$this->_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page, $to_display );
		}

		// If it is the last pagenum and there are orphaned pages, display them with paging as well.
		if ( isset( $children_pages ) && $count < $end ){
			foreach ( $children_pages as $orphans ){
				foreach ( $orphans as $op ) {
					if ( $count >= $end )
						break;

					if ( $count >= $start ) {
						$to_display[$op->ID] = 0;
					}

					$count++;
				}
			}
		}

		$ids = array_keys( $to_display );
		_prime_post_caches( $ids );

		if ( ! isset( $GLOBALS['post'] ) ) {
			$GLOBALS['post'] = reset( $ids );
		}

		foreach ( $to_display as $page_id => $level ) {
			echo "\t";
			$this->single_row( $page_id, $level );
		}
	}

	/**
	 * Given a top level page ID, display the nested hierarchy of sub-pages
	 * together with paging support
	 *
	 * @since 3.1.0 (Standalone function exists since 2.6.0)
	 * @since 4.2.0 Added the `$to_display` parameter.
	 *
	 * @param array $children_pages
	 * @param int $count
	 * @param int $parent
	 * @param int $level
	 * @param int $pagenum
	 * @param int $per_page
	 * @param array $to_display List of pages to be displayed. Passed by reference.
	 */
	private function _page_rows( &$children_pages, &$count, $parent, $level, $pagenum, $per_page, &$to_display ) {
		if ( ! isset( $children_pages[$parent] ) )
			return;

		$start = ( $pagenum - 1 ) * $per_page;
		$end = $start + $per_page;

		foreach ( $children_pages[$parent] as $page ) {
			if ( $count >= $end )
				break;

			// If the page starts in a subtree, print the parents.
			if ( $count == $start && $page->post_parent > 0 ) {
				$my_parents = array();
				$my_parent = $page->post_parent;
				while ( $my_parent ) {
					// Get the ID from the list or the attribute if my_parent is an object
					$parent_id = $my_parent;
					if ( is_object( $my_parent ) ) {
						$parent_id = $my_parent->ID;
					}

					$my_parent = get_post( $parent_id );
					$my_parents[] = $my_parent;
					if ( !$my_parent->post_parent )
						break;
					$my_parent = $my_parent->post_parent;
				}
				$num_parents = count( $my_parents );
				while ( $my_parent = array_pop( $my_parents ) ) {
					$to_display[$my_parent->ID] = $level - $num_parents;
					$num_parents--;
				}
			}

			if ( $count >= $start ) {
				$to_display[$page->ID] = $level